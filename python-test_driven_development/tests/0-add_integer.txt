==========================
Using add_integer function
==========================

Adding tests for
``add_integer()``.

Numbers
=======

``add_integer()`` returns the sum of its arguments.
a and b must be integers or floats,
otherwise raise a TypeError exception with the message a must be an integer or b must be an integer.

Import libraries
================

>>> add_integer = __import__('0-add_integer').add_integer


>>> add_integer(2, 2)
4
>>> add_integer(1.0, 5.0)
6

>>> add_integer(1.0, 5)
6

>>> add_integer(1, 5.0)
6

>>> add_integer(-1, -5.0)
-6

>>> add_integer(a, 1)
Traceback (most recent call last):
NameError: name 'a' is not defined

>>> add_integer(1, b)
Traceback (most recent call last):
NameError: name 'b' is not defined

>>> add_integer(a, b)
Traceback (most recent call last):
NameError: name 'a' is not defined

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer(1)
99

>>> add_integer("b", 2)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, "a")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(["a", 2], 15)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(8, 1e600)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(1e600, -6)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer